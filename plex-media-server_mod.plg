<?xml version='1.0' standalone='yes'?>
<PLUGIN>

<!--
2011-08-19 0.9.3.5-0.1ds 	- first release
2011-08-31 0.9.3.5-0.3ds 	- LC_ALL/LANG to plex.sh
2011-08-31 0.9.3.5-0.4ds 	- check every hour if plex is running if not start it
2011-10-25 0.5ds 			- changed installscript to use rsync / change owner of Library if needed 
2011-10-30 0.6ds 			- changed PMS icon
2011-10-31 0.7ds 			- add Plex 0.9.5 (Laika/prerelease)
2011-10-31 0.7a-ds			- changed position of plex.sh to $PLEX_INSTALLDIR
2011-11-01 0.8ds			- little redesign
2011-11-03 0.9.5.1-ds 		- add Plex 0.9.5.1 
2011-11-05 0.9.5.1a-ds		- readded tmp dir / get rid of start.sh / cronjob removed 
2011-11-05 0.9.5.1b-ds		- changes in $RUNAS detection / set tmp dir as link
2011-11-23 0.9.5.1c-ds 		- possibility to change between link/variable 
2011-11-29 0.9.5.2-ds   	- update to PMS 0.9.5.2
2012-03-04 0.9.5.3a-ds		- update to PMS 0.9.5.3
2012-03-28 0.9.5.3			- only RAM install
2012-03-31 0.2				- added the possibility to update PMS without a installing a new plugin/changed name
2012-05-12 0.2a-ww  		- update to PMS 0.9.6.1
2012-05-14 0.2b-ww          - added version informations
2012-05-18 0.3-ww         	- added storage/memory used by install & data dirs + some improvements
2012-05-22 0.4-ww         	- added install directory support
2012-05-25-ww         		- added some modifications in web layout + data persistency info

This Plugin installs and controls Plex Media Server for UnRaid.
All dependencies are installed as needed and everything is controlable from the webgui
-->

<FILE Name="/boot/config/plugins/plex/PlexMediaServer-0.9.6.1.89-3c84bb7-unRAID.tar.bz2">
<URL>http://plex-downloads.s3.amazonaws.com/0.9.6.1/Releases/Linux-Slackware-131-i386/PlexMediaServer-0.9.6.1.89-3c84bb7-unRAID.tar.bz2</URL>
<MD5>13ba0ba236817cd93c554cd8f6413403</MD5>
</FILE>
<FILE Name="/boot/config/plugins/plex/pms_48px.png">
<URL>http://plex.spidisoft.de/pms_48px.png</URL>
<MD5>dc235654e29fa64f5cb3be53a73f8a38</MD5>
</FILE>

<!-- clean up previous install -->
<FILE Name="/tmp/plex-cleanup" Run="/bin/bash">
<INLINE>
<![CDATA[
rm -f /etc/rc.d/rc.plex
rm -f -R /usr/local/emhttp/plugins/plex
# rm -f /etc/cron.hourly/checkplex
rm -f /var/log/plugins/plex
rm -f /tmp/plex-cleanup
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/plex/plex_settings.cfg">
<INLINE>
<![CDATA[
# plex configuration
SERVICE="disable"
PLEX_INSTALLDIR="/usr/local/plex"
PLEX_LIBRARYDIR="/usr/local/plex"
PLEX_TMPDIR="/tmp/plex"
RUNAS="unraid-plex"
PLEX_USE_UTF="true"
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/plex/plex_version.cfg">
<INLINE>
<![CDATA[
# plex version
PLEX_VERSION="v0.9.6.1.89-3c84bb7"
PLEX_TARFILE="PlexMediaServer-0.9.6.1.89-3c84bb7-unRAID.tar.bz2"
PLEX_TARDIR="PlexMediaServer-0.9.6.1.89-3c84bb7"
]]>
</INLINE>
</FILE>

<FILE Name="/etc/rc.d/rc.plex" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/sh
# Start/stop/restart/enable/disable plex.

plex_start()
{
  	# no-op if not enabled
  	if [ "$SERVICE" != "enable" ]; then
  		logger -t plex-rc.plex "Service is not enabled"
    	return
  	fi
	
  	# no-op if already running
  	if [ ! -z "$(ps -ef | grep Plex\ Media\ Server | grep -v grep | grep -v com.plexapp | awk '{print$2}')" ]; then
  		logger -t plex-rc.plex "Plex Media Server is already runnning"
    	return
  	fi
	
	# if directory doesn't exist or Plex Media Server is not found, install it
	if [[ "$PLEX_INSTALLDIR" != "" &&  ! -e "$PLEX_INSTALLDIR"/Plex\ Media\ Server ]]; then
		plex_install
	fi

  	logger -t plex-rc.plex "starting PMS"

	if [ "$PLEX_USE_UTF" == "false" ]; then
		logger -t plex-rc.plex "start PMS without UTF-8 "
		su $RUNAS -s /bin/bash -c "(cd $PLEX_INSTALLDIR; export LD_LIBRARY_PATH=$PLEX_INSTALLDIR; export PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR=$PLEX_LIBRARYDIR/Application\ Support/; export TMPDIR=$PLEX_TMPDIR; export PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS=6; ulimit -s 3000; nohup ./Plex\ Media\ Server &)"
	else  
		logger -t plex-rc.plex 	"start PMS with UTF-8"
		su $RUNAS -s /bin/bash -c "(cd $PLEX_INSTALLDIR; export LD_LIBRARY_PATH=$PLEX_INSTALLDIR; export PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR=$PLEX_LIBRARYDIR/Application\ Support/; export TMPDIR=$PLEX_TMPDIR; export PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS=6; export LC_ALL=en_US.utf8; export LANG=en_US.utf8; ulimit -s 3000; nohup ./Plex\ Media\ Server &)"
	fi
		
  	sleep 2
	for i in {1..5}; do
		if [ -z "$(ps -ef | grep Plex\ Media\ Server | grep -v grep | grep -v com.plexapp | awk '{print$2}')" ]; then
    		logger -t plex-rc.plex "Check $i: Plex has NOT started yet, something is maybe wrong!"
    		sleep 3
  		else
			logger -t plex-rc.plex "Plex Media Server IS running"
			echo $(ps -ef | grep Plex\ Media\ Server | grep -v grep | grep -v com.plexapp | awk '{print$2}') > /var/run/plex/plex.pid
			break
		fi
  	done
}

plex_stop()
{
  	# no-op if not running
	if [ -z "$(ps -ef | grep Plex\ Media\ Server | grep -v grep | awk '{print$2}')" ]; then
		logger -t plex-rc.plex "Nothing to Stop"
		return
	fi

	logger -t plex-rc.plex "Stopping Plex..."
	sleep 0.5
	
	if [ -f /var/run/plex/plex.pid ]; then
		kill -INT $(cat /var/run/plex/plex.pid)
	fi
	
	sleep 2
	
	for i in $(ps -ef | grep Plex\ Media\ Server | egrep -v "grep" | awk '{print$2}'); do
		logger -t plex-rc.plex "PMS is still runnig"  
		kill -INT $i
  		logger -t plex-rc.plex PMS with PID $i killed
	done
	
	rm /var/run/plex/plex.pid	
}

write_config()
{
  	echo "# plex configuration" > /boot/config/plugins/plex/plex_settings.cfg
  	echo "SERVICE=\"$SERVICE\"" >> /boot/config/plugins/plex/plex_settings.cfg
  	echo "PLEX_INSTALLDIR=\"$PLEX_INSTALLDIR\"" >> /boot/config/plugins/plex/plex_settings.cfg
  	echo "PLEX_LIBRARYDIR=\"$PLEX_LIBRARYDIR\"" >> /boot/config/plugins/plex/plex_settings.cfg
  	echo "PLEX_TMPDIR=\"$PLEX_TMPDIR\"" >> /boot/config/plugins/plex/plex_settings.cfg
  	echo "RUNAS=\"$RUNAS\"" >> /boot/config/plugins/plex/plex_settings.cfg
  	echo "PLEX_USE_UTF=\"$PLEX_USE_UTF\"" >> /boot/config/plugins/plex/plex_settings.cfg
}

write_version()
{
  	echo "# plex version" > /boot/config/plugins/plex/plex_version.cfg
  	echo "PLEX_VERSION=\"$PLEX_VERSION\"" >> /boot/config/plugins/plex/plex_version.cfg
	echo "PLEX_TARFILE=\"$PLEX_TARFILE\"" >> /boot/config/plugins/plex/plex_version.cfg
  	echo "PLEX_TARDIR=\"$PLEX_TARDIR\"" >> /boot/config/plugins/plex/plex_version.cfg
}

plex_enable()
{
	# if not already enabled, enable it
	if [ "$SERVICE" != "enable" ]; then
    	SERVICE=enable
	fi
	PLEX_INSTALLDIR="$1"
	PLEX_LIBRARYDIR="$2"
	PLEX_TMPDIR="$3"
	PLEX_USE_UTF="$4"
	plex_check_instdir
	plex_check_tmpdir
	plex_check_libdir
	write_config
	
	# enabling also starts it
	plex_start
}

plex_disable()
{
	plex_stop
	SERVICE=disable
	PLEX_INSTALLDIR="$1"
	PLEX_LIBRARYDIR="$2"
	PLEX_TMPDIR="$3"
	PLEX_USE_UTF="$4"
	plex_check_instdir
	plex_check_tmpdir
	plex_check_libdir
  	write_config
}

plex_check_instdir()
{
	if [ ! -d $PLEX_INSTALLDIR ]; then
		logger -t plex-rc.plex "$PLEX_INSTALLDIR doesn't exist creating it"
		mkdir -p $PLEX_INSTALLDIR
	fi
	
	# check if current runas user is owner of $PLEX_INSTALLDIR
	if [ "$(stat -c %U $PLEX_INSTALLDIR)"  != "$RUNAS" ]; then
		logger -t plex-rc.plex "Plex Media Server: changing owner of $PLEX_INSTALLDIR to $RUNAS"
		chown -R $RUNAS:users $PLEX_INSTALLDIR
	fi
}

plex_check_libdir()
{
	if [ ! -d $PLEX_LIBRARYDIR ]; then
		logger -t plex-rc.plex "$PLEX_LIBRARYDIR doesn't exist creating it"
		mkdir -p $PLEX_LIBRARYDIR
	fi
	
	# check if current runas user is owner of $PLEX_LIBRARYDIR
	if [ "$(stat -c %U $PLEX_LIBRARYDIR)"  != "$RUNAS" ]; then
		logger -t plex-rc.plex "Plex Media Server: changing owner of $PLEX_LIBRARYDIR to $RUNAS"
		chown -R $RUNAS:users $PLEX_LIBRARYDIR
	fi
}

plex_check_tmpdir()
{
	if [ ! -d $PLEX_TMPDIR ]; then
		logger -t plex-rc.plex "$PLEX_TMPDIR doesn't exist creating it"
		mkdir -p $PLEX_TMPDIR
	fi
	
	#Check if current runas user is owner of $PLEX_TMPDIR
	if  [ $(readlink -f $PLEX_TMPDIR) != "/tmp" ] && [ "$(stat -c %U $PLEX_TMPDIR)"  != "$RUNAS" ]; then
		logger -t plex-rc.plex "Plex Media Server: changing owner of $PLEX_TMPDIR to $RUNAS"
		chown -R $RUNAS:users $PLEX_TMPDIR
	fi
}

plex_install()
{
	if [ ! -f $PLEX_INSTALLDIR/Plex\ Media\ Server ]; then
		logger -t plex-rc.plex "Nothing found install Plex Media Server now! ($PLEX_VERSION)"
	else 
		logger -t plex-rc.plex  "Plex Media Server already installed to $PLEX_INSTALLDIR"
		if [ $(export LD_LIBRARY_PATH="$PLEX_INSTALLDIR"; $PLEX_INSTALLDIR/Plex\ Media\ Server --version) != $PLEX_VERSION ]; then
			logger -t plex-rc.plex  "other version found install $PLEX_VERSION now" 
		else 
			logger -t plex-rc.plex  "Same version found ($PLEX_VERSION) nothing to do"
			exit
		fi
	fi

	logger -t plex-rc.plex "Install PlexMediaServer $PLEX_VERSION to $PLEX_INSTALLDIR"
	tar -xf /boot/config/plugins/plex/$PLEX_TARFILE -C /tmp
	chown -R root:root /tmp/$PLEX_TARDIR
	chmod -R 777 /tmp/$PLEX_TARDIR
	
	if [ ! -d $PLEX_INSTALLDIR ]; then
		mkdir -p $PLEX_INSTALLDIR
	fi
	if [ ! -d $PLEX_LIBRARYDIR ]; then
		mkdir -p $PLEX_LIBRARYDIR
	fi
	
	rsync -a /tmp/$PLEX_TARDIR/ $PLEX_INSTALLDIR

	rm -f -R /tmp/$PLEX_TARDIR
}

plex_check_new_vesion()
{
	
	version=$(wget -q -O - http://plex.spidisoft.de/plex_version_new.cfg | grep PLEX_VERSION_NEW | awk -F\" '{print $2}')
	if [ "$(plex_version)" != "$version" ]; then
		logger -t plex-rc.plex  "New PMS version found: $version"
		echo "true"
		exit
	fi
	echo "false"
}

plex_update()
{
	if [ -f /tmp/plex_version_new.cfg ]; then
		rm -f /tmp/plex_version_new.cfg
	fi
	wget -q -P /tmp/ http://plex.spidisoft.de/plex_version_new.cfg
	if  [ $? -ne 0 ]; then
		logger -t plex-rc.plex  "update: wget retuned with an error"
		exit
	fi
	source /tmp/plex_version_new.cfg
	
	#is new version already downloaded?
	if [ ! -f /boot/config/plugins/plex/$PLEX_TARFILE_NEW ]; then
		wget -q -P /boot/config/plugins/plex/ $PLEX_DOWNLOAD
		if  [ $? -ne 0 ]; then
			logger -t plex-rc.plex  "update: wget retuned with an error"
			exit
		fi
	fi
	
	#check md5sum
	PLEX_MD5=$(md5sum /boot/config/plugins/plex/$PLEX_TARFILE_NEW | awk '{print$1}') 
	if [ "$PLEX_MD5" != "$PLEX_MD5_NEW" ]; then
		logger -t plex-rc.plex  "wrong md5 checksum"
		exit
	fi
	
	PLEX_VERSION=$PLEX_VERSION_NEW
	PLEX_TARFILE=$PLEX_TARFILE_NEW
	PLEX_TARDIR=$PLEX_TARDIR_NEW
	
	write_version
	rm -f /tmp/plex_version_new.cfg
	plex_stop
	plex_install
	plex_start
}

plex_version()
{
	export LD_LIBRARY_PATH="$PLEX_INSTALLDIR"
	$PLEX_INSTALLDIR/Plex\ Media\ Server --version
}

plex_datacheck() 
{
	array=( ramfs proc tempfs sysfs )
	fs=$( stat -f -c '%T' $PLEX_LIBRARYDIR )
	for i in "${array[@]}"
	do
		if [ $i = $fs ]; then
		    echo "<p style="color:red\;margin-left:10px\;"><b>WARNING:</b>Your Library Directory is not persistent and WILL NOT survive a reboot. Please locate Data Directory on disk for persistency</p>"
			break
		elif [ $i = msdos ]; then
			echo "<p style="color:red\;margin-left:10px\;"><b>WARNING:</b>Your Library Directory is located on your flash drive. This will decrease your flash drives life span!</p>"
			break
		else
			echo "<p style="color:green\;margin-left:10px\;">Your data will persist after a reboot</p>"
			break
		fi
	done
}

# read the configuration files
source /boot/config/plugins/plex/plex_settings.cfg
source /boot/config/plugins/plex/plex_version.cfg

case "$1" in
	'start')
  		plex_start
  	;;
	'stop')
  		plex_stop
  	;;
	'restart')
  		plex_stop
  		sleep 1
  		plex_start
  	;;
  	'install')
  		plex_install
  	;;
  	'update')
  		plex_update
  	;;
  	'newversion')
  		plex_check_new_vesion
  	;;
  	'version')
  		plex_version
  	;;
	'enable')
  		plex_enable $2 $3 $4 $5
  	;;
	'disable')
  		plex_disable $2 $3 $4 $5
  	;;
	'datacheck')
		plex_datacheck
	;;
	*)
  		echo "usage $0 start|stop|restart|update|version|newversion"
esac
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/plex/plex.page">
<INLINE>
<![CDATA[
Menu="NetworkServices"
Icon="pms_48px.png"
Version="0.4"
Author="spidi; Wojciech Walaszek"
Type="php"
Title="Plex Media Server"
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/plex/pms_48px.png">
<LOCAL>/boot/config/plugins/plex/pms_48px.png</LOCAL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/plex/plex.php">
<INLINE>
<![CDATA[
<?PHP
$plex_cfg = parse_ini_file( "/boot/config/plugins/plex/plex_settings.cfg");
$plex_datacheck = shell_exec ( "/etc/rc.d/rc.plex datacheck" );
$plex_installed = file_exists( $plex_cfg["PLEX_INSTALLDIR"] . "/Plex Media Server" ) ? "yes" : "no";
if ($plex_installed=="yes")
{
	$plex_running = file_exists( "/var/run/plex/plex.pid") ? "yes" : "no";
	$plex_version = shell_exec( "/etc/rc.d/rc.plex version" );
	$plex_newversion = shell_exec( "/etc/rc.d/rc.plex newversion" );
	$plex_newestversion = shell_exec( "wget -q -O - http://plex.spidisoft.de/plex_version_new.cfg | grep PLEX_VERSION_NEW | awk -F\\\" '{print $2}'" );
	$plex_installdirsize = trim(shell_exec( "if [ -e $plex_cfg[PLEX_INSTALLDIR] ]; then du -sh $plex_cfg[PLEX_INSTALLDIR] | cut -f1; else echo 0; fi"));
	$plex_datadirsize = trim(shell_exec( "if [ -e $plex_cfg[PLEX_LIBRARYDIR] ]; then du -sh $plex_cfg[PLEX_LIBRARYDIR] | cut -f1; else echo 0; fi" ));
}
?>
	<form name="plex_settings" method="POST" action="/update.htm" target="progressFrame">
		<input type="hidden" name="cmd" value="/etc/rc.d/rc.plex">
		<table class="settings">
			<tr>
				<td>Enable Plex Media Server:</td>
				<td>
					<select name="arg1" size="1"  onChange="checkPLEX_INSTALLDIR(this.form);">
						<?=mk_option($plex_cfg['SERVICE'], "disable", "No");?>
						<?=mk_option($plex_cfg['SERVICE'], "enable", "Yes");?>
					</select>
				</td>
			</tr>
			<tr>
				<td>Install directory:</td>
				<td><input type="text" name="arg2" maxlength="60" value="<?=$plex_cfg['PLEX_INSTALLDIR'];?>"></td>
			</tr>
			<tr>
				<td>Library directory:</td>
				<td><input type="checkbox" name="use_data" <?=($plex_cfg['PLEX_LIBRARYDIR']!=$plex_cfg['PLEX_INSTALLDIR'])?"checked=\"checked\"":"";?>  onChange="checkPLEX_LIBRARYDIR(this.form);"> <input type="text" name="arg3" maxlength="60" value="<?=$plex_cfg['PLEX_LIBRARYDIR'];?>"></td>
			</tr>
			<tr>
				<td>Temp directory:</td>
				<td><input type="text" name="arg4" maxlength="60" value="<?=$plex_cfg['PLEX_TMPDIR'];?>"></td>
			</tr>
			<tr>
				<td>Use UTF-8:</td>
				<td><input type="checkbox" name="use_utf" id="use_utf" <?=($plex_cfg['PLEX_USE_UTF']==='true')?"checked=\"checked\"":"";?> onChange="checkUSEUTF(this.form);"> <input type="hidden" name="arg5" maxlength="60" value="<?=$plex_cfg['PLEX_USE_UTF'];?>" ></td>
			</tr>
			<tr>
				<td></td>
				<td><input type="submit" name="runCmd" value="Apply"><button type="button" onClick="done();">Done</button></td>
			</tr>
		</table>
	</form>
	<hr>
<p style="font-size:16px;"><b>Additional informations:</b></p>
<? if ($plex_installed=="yes"): ?>
	<? if ($plex_running=="yes"): ?>
		<p style="margin-left:10px;"><a href="http://<?=$var['NAME'];?>:32400/manage" target="_blank">Plex Media Server</a> is running with version: <b><?=$plex_version;?></b></p>
	<? else: ?>
		<p style="margin-left:10px;"><b>Plex Media Server is not running</b></p>
	<? endif; ?>
	<? if ($plex_cfg["PLEX_INSTALLDIR"] == $plex_cfg["PLEX_LIBRARYDIR"]): ?>
		<p style="margin-left:10px;">Plex Media Server storage memory usage: install + library directory: <b><?=$plex_installdirsize?></b></p>
	<? else: ?>
		<p style="margin-left:10px;">Plex Media Server storage memory usage: install directory: <b><?=$plex_installdirsize?><b/>, library directory: <b><?=$plex_datadirsize?></b></p>
	<? endif; ?>
	<?=$plex_datacheck?>
	<? if (trim($plex_newversion) == "true"): ?>
		<form name="plex_settings" method="POST" action="/update.htm" target="progressFrame">
			<input type="hidden" name="cmd" value="/etc/rc.d/rc.plex update">
			<p style="margin-left:10px;">Update available to version: <b><?=$plex_newestversion;?></b></p>
			<table style="align:center;">
				<tr>
					<td><input type="submit" name="runCmd" value="Update"><button type="button" onClick="done();">Done</button></td>
				</tr>
			</table>
		</form>
	<? endif; ?>
<? else: ?>
	<p style="margin-left:10px;"><b>Plex Media Server is not installed</b></p>
<? endif; ?>

<script type="text/javascript">
function checkPLEX_INSTALLDIR(form)
{
	if ("<?=$plex_running;?>" == "yes")
	{
		form.arg2.readOnly = true;
		form.arg3.readOnly = true;
		form.arg4.readOnly = true;
		form.arg5.readOnly = true;
		form.use_utf.disabled = true;
		form.use_data.disabled = true;
   }
	else
	{
		form.arg2.readOnly = (form.arg1.value == "enable");
		form.arg3.readOnly = (form.arg1.value == "enable");
		form.arg4.readOnly = (form.arg1.value == "enable");		
		form.arg5.readOnly = true;
		form.use_utf.disabled = (form.arg1.value == "enable");
		form.use_data.disabled = (form.arg1.value == "enable");
   }
}

function checkPLEX_LIBRARYDIR(form)
{
	if (form.use_data.checked == false)
	{
		form.arg3.value = form.arg2.value;
		form.arg3.type = "hidden";
	}
	else
	{
		form.arg3.value = "<?=$plex_cfg['PLEX_LIBRARYDIR'];?>";
		form.arg3.type = "text";
	} 	
}

function checkUSEUTF(form)
{
	if (form.use_utf.checked == false)
	{
		form.arg5.value = "false";
	}
	else
	{
		form.arg5.value = "true";
	} 	
}

checkPLEX_INSTALLDIR(document.plex_settings);
checkPLEX_LIBRARYDIR(document.plex_settings);
checkUSELINK(document.plex_settings);
</script>
]]>
</INLINE>
</FILE>

<!-- event handler -->
<FILE Name="/usr/local/emhttp/plugins/plex/event/disks_mounted" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
/etc/rc.d/rc.plex start
]]>
</INLINE>
</FILE>

<!-- event handler -->
<FILE Name="/usr/local/emhttp/plugins/plex/event/unmounting_disks" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
/etc/rc.d/rc.plex stop
]]>
</INLINE>
</FILE>

<!-- event handler 
<FILE Name="/etc/cron.hourly/checkplex" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/sh
if [ -z "$(ps -ef | grep Plex\ Media\ Server | grep -v grep | grep -v com.plexapp | awk '{print$2}')" ]; then
	/etc/rc.d/rc.plex restart
	logger -t plex-cron "Restart of Plex Media Server by cron (if enabled) at $(date)" 
fi
]]>
</INLINE>
</FILE>
-->
 
<FILE Name="/tmp/plex-install" Run="/bin/bash">
<INLINE>
<![CDATA[
source /boot/config/plugins/plex/plex_settings.cfg

#check if variable already exists (update) if not set to default
if [ ! $PLEX_USE_UTF ];then
	echo "PLEX_USE_UTF=\"true\"" >> /boot/config/plugins/plex/plex_settings.cfg
fi

# create plex user if necessary
/bin/id $RUNAS > /dev/null
if  [ $? -ne 0 ]; then
	logger -t plex-install "create user $RUNAS"
  	useradd -r -g users -s /sbin/nologin $RUNAS
  	cp /etc/passwd /etc/shadow /boot/config
fi

# create plex-writable directory for pid file
if [ ! -e /var/run/plex ]; then
  mkdir /var/run/plex
  chown root:root /var/run/plex
  chmod -R 0777 /var/run/plex
fi

rm -f /tmp/plex-install
]]>
</INLINE>
</FILE>

<FILE Name="/var/log/plugins/plex">
<INLINE>
<![CDATA[

]]>
</INLINE>
</FILE>

</PLUGIN>